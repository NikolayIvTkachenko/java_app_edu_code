package monade;

import java.util.function.Function;

/**Мона́да — особый тип данных в функциональных языках программирования, для которого возможно задать императивную
 * последовательность выполнения некоторых операций над хранимыми значениями[1].
 * Монады позволяют задавать последовательность выполнения операций, производить операции с побочными эффектами
 * и другие действия, которые сложно или вовсе невозможно реализовать в функциональной парадигме программирования другими способами.
 * Концепция монады и термин изначально происходят из теории категорий, где она определяется как функтор с
 * дополнительной структурой. Исследования, начатые в конце 1980-х — начале 1990-х годов, установили, что монады могут привнести,
 * казалось бы, разрозненные проблемы компьютерной науки в единую функциональную модель.
 * Теория категорий также выдвигает несколько формальных требований[каких?],
 * так называемых монадических законов, которые должны соблюдаться любой монадой и могут быть использованы
 * для верификации монадического кода.
 */
public class MonadeSimple<T> {
    final T value;

    private MonadeSimple(T value) {
        this.value = value;
    }

    public static <T> MonadeSimple<T> from(T value) {
        return new MonadeSimple<>(value);
    }

    public <U> MonadeSimple<U> flatMap(Function<T, MonadeSimple<U>> mapFunc) {
        return mapFunc.apply(value);
    }

    public <U> MonadeSimple<U> map(Function<T, U> mapFunc) {
        return flatMap(val -> new MonadeSimple(mapFunc.apply(val)));
    }

}
